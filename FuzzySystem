import numpy as np
import skfuzzy as fuzz
import skfuzzy.control
from skfuzzy import *

class FuzzyLogic:

    def __init__(self, cal_start=0, cal_stop=10, bl_start=0, bl_stop=10, tl_start=0, tl_stop=10, pd_start=0, pd_stop=10, o_start=0, o_stop=10):
        """
        constructor that assign the start/stop values 
        and feed them to the make_variables() func.
        """
        self.__cal_start = cal_start
        self.__cal_stop = cal_stop
        self.__bl_start = bl_start
        self.__bl_stop = bl_stop
        self.__tl_start = tl_start
        self.__tl_stop = tl_stop
        self.__pd_start = pd_start
        self.__pd_stop = pd_stop
        self.__o_start = o_start
        self.__o_stop = o_stop

    def make_variables(self):
        """ engine
            step 1: create input, output variables
        :return:
        """
        self.__cal = skfuzzy.control.Antecedent(np.arange(self.__cal_start, self.__cal_stop),
                                                'CAL')  # input variable Clinical attachement loss
        self.__bl = skfuzzy.control.Antecedent(np.arange(self.__bl_start, self.__bl_stop),
                                               'BL')  # input variable bone loss
        self.__tl = skfuzzy.control.Antecedent(np.arange(self.__tl_start, self.__tl_stop),
                                               'TL')  # input variable teeth loss
        self.__pd = skfuzzy.control.Antecedent(np.arange(self.__pd_start, self.__pd_stop),
                                               'PD')  # input variable probing depth
        # self.__x = skfuzzy.control.Antecedent(np.arange(self.__x_start, self.__x_stop),
        #                                        'X')   #input variable bone loss axis(horizontal/vertical)
        self.__perio = skfuzzy.control.Consequent(np.arange(self.__o_start, self.__o_stop),
                                                    'PS')
    def set_cal_low_start(self, start):
        self.__cal_low_start = start

    def set_cal_low_mid(self, mid):
        self.__cal_low_mid = mid

    def set_cal_low_stop(self, stop):
        self.__cal_low_stop = stop

    def set_cal_nor_start(self, start):
        self.__cal_nor_start = start

    def set_cal_nor_mid(self, mid):
        self.__cal_nor_mid = mid

    def set_cal_nor_stop(self, stop):
        self.__cal_nor_stop = stop

    def set_cal_high_start(self, start):
        self.__cal_high_start = start

    def set_cal_high_mid(self, mid):
        self.__cal_high_mid = mid

    def set_cal_high_stop(self, stop):
        self.__cal_high_stop = stop

    def set_bl_low_start(self, start):
        self.__bl_low_start = start

    def set_bl_low_mid(self, mid):
        self.__bl_low_mid = mid

    def set_bl_low_stop(self, stop):
        self.__bl_low_stop = stop

    def set_bl_nor_start(self, start):
        self.__bl_nor_start = start

    def set_bl_nor_mid(self, mid):
        self.__bl_nor_mid = mid

    def set_bl_nor_stop(self, stop):
        self.__bl_nor_stop = stop

    def set_bl_high_start(self, start):
        self.__bl_high_start = start

    def set_bl_high_mid(self, mid):
        self.__bl_high_mid = mid

    def set_bl_high_stop(self, stop):
        self.__bl_high_stop = stop

    def set_tl_low_start(self, start):
        self.__tl_low_start = start

    def set_tl_low_mid(self, mid):
        self.__tl_low_mid = mid

    def set_tl_low_stop(self, stop):
        self.__tl_low_stop = stop

    def set_tl_nor_start(self, start):
        self.__tl_nor_start = start

    def set_tl_nor_mid(self, mid):
        self.__tl_nor_mid = mid

    def set_tl_nor_stop(self, stop):
        self.__tl_nor_stop = stop

    def set_tl_high_start(self, start):
        self.__tl_high_start = start

    def set_tl_high_mid(self, mid):
        self.__tl_high_mid = mid

    def set_tl_high_stop(self, stop):
        self.__tl_high_stop = stop

    def set_pd_low_start(self, start):
        self.__pd_low_start = start

    def set_pd_low_mid(self, mid):
        self.__pd_low_mid = mid

    def set_pd_low_stop(self, stop):
        self.__pd_low_stop = stop

    def set_pd_nor_start(self, start):
        self.__pd_nor_start = start

    def set_pd_nor_mid(self, mid):
        self.__pd_nor_mid = mid

    def set_pd_nor_stop(self, stop):
        self.__pd_nor_stop = stop

    def set_pd_high_start(self, start):
        self.__pd_high_start = start

    def set_pd_high_mid(self, mid):
        self.__pd_high_mid = mid

    def set_pd_high_stop(self, stop):
        self.__pd_high_stop = stop

    def set_o_mild_start(self, start):
        self.__o_mild_start = start

    def set_o_mild_mid(self, mid):
        self.__o_mild_mid = mid

    def set_o_mild_stop(self, stop):
        self.__o_mild_stop = stop

    def set_o_mod_start(self, start):
        self.__o_mod_start = start

    def set_o_mod_mid(self, mid):
        self.__o_mod_mid = mid

    def set_o_mod_stop(self, stop):
        self.__o_mod_stop = stop

    def set_o_severe_start(self, start):
        self.__o_severe_start = start

    def set_o_severe_mid(self, mid):
        self.__o_severe_mid = mid

    def set_o_severe_stop(self, stop):
        self.__o_severe_stop = stop

    def set_o_adv_start(self, start):
        self.__o_adv_start = start

    def set_o_adv_mid(self, mid):
        self.__o_adv_mid = mid

    def set_o_adv_stop(self, stop):
        self.__o_adv_stop = stop                                            
